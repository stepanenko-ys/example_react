------------------------------------------------------
Добавление стилей:
---------------------

Стили в React описываются в CamelCase, все тире убираются.

1.  nano src/Todo/TodoList.js

    i: const styles = {
    i:     ul: {
    i:         listStyle: 'none',
    i:         margin: 0,
    i:         padding: 0
    i:     }
    i: }

    i: ...
    i: <ul style={styles.ul}>
    i:     <li>1</li>
    i:     <li>2</li>
    i: </ul>
    i: ...


------------------------------------------------------
Передача параметров в компонент:
---------------------

1.  nano src/App.js

    i: ...
    i: function App() {
    i:     const todos = [
    i:         {id: 1, completed: false, title: 'Купить Хлеб'},
    i:         {id: 2, completed: false, title: 'Купить Масло'},
    i:         {id: 3, completed: false, title: 'Купить Сыр'},
    i:     ]
    i:     return (
    i: ...
    i:         <TodoList todos={todos} />
    i: ...
    

------------------------------------------------------
Прием параметров в компонент (из предыдущего пункта) и создание Цикла:
---------------------

1.  nano src/Todo/TodoList.js

    i: ...
    i: export default function TodoList(props) {
    i:     return (
    i:         <ul style={styles.ul}>
    i:             {props.todos.map(todo => {
    i:                 return <TodoItem todo_data={todo} key={todo.id} />
    i:             }) }
    i:         </ul>
    i:     )
    i: }
    i: ...
    
2.  nano src/Todo/TodoItem.js
    
    i: ...
    i: export default function TodoItem({todo_data}) {
    i:     return (
    i:         <li>{todo_data.title}</li>
    i:     )
    i: }
    i: ...
 
    i: У любого массива есть метод ".map()" помогает преобразовать этот массив.
    i: todo => {...} На каждой итерации принимается объект "todo" и в колбек функции формируется HTML

    i: Можно получать так все "props"
    i: export default function TodoItem(props) {
    i:     {console.log('======', props);}
    i:     {console.log('======', props.todo_data);}

    i: Или можно получать так нужный ключ, если мы знаем название нужного нам входящего параметра  
    i: export default function TodoItem({todo_data}) {
    i:     {console.log('======', todo_data);}
    i:     {console.log('======', {todo_data});}


------------------------------------------------------
Вывод индекса для каждого из элементов "todo":
---------------------

1.  nano src/Todo/TodoList.js

    i: ...
    i: {props.todos.map((todo, todo_my_index) => {
    i:     return <TodoItem todo_data={todo} key={todo.id} todo_index={todo_my_index}  />
    i: }) }
    i: ...

2.  nano src/Todo/TodoItem.js

    i: ...
    i: export default function TodoItem({todo_data, todo_index}) {
    i:     return (
    i:         <li><strong>{todo_index + 1}</strong> - {todo_data.title}</li>
    i:     )
    i: }
    i: ...
    
===================================================================






===================================================================

---------------------------------------------------







===================================================================






===================================================================

---------------------------------------------------

===================================================================





===================================================================

---------------------------------------------------

===================================================================





===================================================================

---------------------------------------------------

===================================================================





===================================================================

---------------------------------------------------

===================================================================





===================================================================

---------------------------------------------------

=====================================================================


